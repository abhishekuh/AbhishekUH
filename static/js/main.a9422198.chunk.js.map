{"version":3,"sources":["components/contact.js","components/home.js","components/projects.js","App.js","serviceWorker.js","index.js"],"names":["contact","className","Component","home","projects","App","basename","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAEqBA,E,iLAEb,OACI,6BACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,sBACX,0BAAMA,UAAU,mBAAhB,cACA,yBAAKA,UAAU,MAAK,uBAAGA,UAAU,4BAAjC,oBACA,yBAAKA,UAAU,MAAK,uBAAGA,UAAU,2BAAjC,kC,GARaC,aCAhBC,E,iLAEb,OACI,6BACI,yBAAKF,UAAU,kBACX,yBAAKA,UAAU,sBACX,0BAAMA,UAAU,mBAAhB,0BACA,0BAAMA,UAAU,eAAhB,wB,GAPUC,aCCbE,E,iLAEb,OACI,6BACI,yBAAKH,UAAU,kBACX,yBAAKA,UAAU,gCACX,0BAAMA,UAAU,mBAAhB,YACA,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,gBAGf,yBAAKA,UAAU,gBAAf,SACA,yBAAKA,UAAU,gBAAf,uDAEJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,gBAGf,yBAAKA,UAAU,gBAAf,cACA,yBAAKA,UAAU,gBAAf,0CAEJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,gBAGf,yBAAKA,UAAU,gBAAf,UACA,yBAAKA,UAAU,gBAAf,yC,GA3BMC,aCsCvBG,MAlCf,WACI,OACI,kBAAC,IAAD,CAAYC,SAAS,KACjB,6BACI,yBAAKL,UAAU,kDACf,uBAAGA,UAAU,yBAAb,yBACI,4BAAQA,UAAU,iBAAiBM,KAAK,SAASC,cAAY,WAAWC,cAAY,aAChFC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAC3D,0BAAMX,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BY,GAAG,aACzC,wBAAIZ,UAAU,wBACV,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAAMA,UAAU,aAAaa,GAAG,SAAhC,SAEJ,wBAAIb,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,aAAaa,GAAG,aAAhC,aAEJ,wBAAIb,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,aAAaa,GAAG,YAAhC,eAKhB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjC,kBAAC,IAAD,CAAOa,KAAK,WAAWC,UAAWjB,IAClC,kBAAC,IAAD,CAAOgB,KAAK,QAAQC,UAAWd,IAC/B,kBAAC,IAAD,CAAOa,KAAK,YAAYC,UAAWb,OCtB/Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a9422198.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class contact extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"main-container\">\n                    <div className=\"banner text-center\">\n                        <span className=\"banner-main-txt\">Contact Me</span>\n                        <div className=\"p1\"><i className=\"fas fa-phone-square-alt\"></i> +91 99010 61010</div>\n                        <div className=\"p1\"><i className=\"fas fa-envelope-square\"></i> abhishekuh94@gmail.com</div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class home extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"main-container\">\n                    <div className=\"banner text-center\">\n                        <span className=\"banner-main-txt\">Abhishek Harapanahalli</span>\n                        <span className=\"banner-text\">Web Developer</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n// import Logo from '../assets/angular.png'\n\nexport default class projects extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"main-container\">\n                    <div className=\"projects-heading text-center\">\n                        <span className=\"banner-main-txt\">Projects</span>\n                        <div className=\"project-container\">\n                            <div className=\"project-card\">\n                                <div className=\"project-img\">\n                                    {/* <img src=\"{Logo}\" alt=\"image\"></ img> */}\n                                </div>\n                                <div className=\"project-name\">Shelf</div>\n                                <div className=\"project-desc\">E Commerce shopping application for web and mobile</div>\n                            </div>\n                            <div className=\"project-card\">\n                                <div className=\"project-img\">\n                                    {/* <img src=\"{Logo}\" alt=\"image\"></ img> */}\n                                </div>\n                                <div className=\"project-name\">CloseVille</div>\n                                <div className=\"project-desc\">Order management business application</div>\n                            </div>\n                            <div className=\"project-card\">\n                                <div className=\"project-img\">\n                                    {/* <img src=\"{Logo}\" alt=\"image\"></ img> */}\n                                </div>\n                                <div className=\"project-name\">Mathup</div>\n                                <div className=\"project-desc\">Mathematics Quiz application</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport { Route, HashRouter, Link } from 'react-router-dom'\nimport contact from './components/contact'\nimport home from './components/home'\nimport projects from './components/projects';\n\nfunction App() {\n    return (\n        <HashRouter basename=\"/\">\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light nav-width\">\n                <a className=\"navbar-brand nav-logo\">Abhishek Harapanhalli</a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\n                        aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                        <ul className=\"navbar-nav nav-items\">\n                            <li className=\"nav-item active\" >\n                                <Link className=\"link-color\" to=\"/home\">Home</Link>\n                            </li>\n                            <li className=\"nav-item\"  >\n                                <Link className=\"link-color\" to=\"/projects\">Projects</Link>\n                            </li>\n                            <li className=\"nav-item\" >\n                                <Link className=\"link-color\" to=\"/contact\">Contact</Link>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <Route exact path=\"/\" component={home}></Route>\n                <Route path=\"/contact\" component={contact}></Route>\n                <Route path=\"/home\" component={home}></Route>\n                <Route path=\"/projects\" component={projects}></Route>\n            </div>\n        </HashRouter>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}